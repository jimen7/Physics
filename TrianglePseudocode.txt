set original position(ball0)


EVEN:

next two balls:

ball1: setPos(getpos pf ball 0) + VEC3( + radius on x axis,0, -2 Radius on z axis, )
ball1: setPos(getpos pf ball 0) + VEC3( - radius on x axis,0, -2 Radius on z axis, )

next 4 balls:

ball1: setPos(getpos pf ball 0) +VEC3( +3 radius on x axis,0, -6 Radius on z axis, )
ball1: setPos(getpos pf ball 0) +VEC3( +1 radius on x axis,0, -6 Radius on z axis, )
ball1: setPos(getpos pf ball 0) +VEC3( -1 radius on x axis,0, -6 Radius on z axis, )
ball1: setPos(getpos pf ball 0) +VEC3( -3 radius on x axis,0, -6 Radius on z axis, )

next 6 balls

ball1: setPos(getpos pf ball 0) +VEC3( +3 radius on x axis,0, -10 Radius on z axis, )




ODD:

next 3 balls:

ball1: setPos(getpos pf ball 0) + VEC3( +2 radius on x axis,0, -4 Radius on z axis, )
ball1: setPos(getpos pf ball 0) + VEC3( 0 radius on x axis,0, -4 Radius on z axis, )
ball1: setPos(getpos pf ball 0) + VEC3( -2 radius on x axis,0, -4 Radius on z axis, )


next 5 balls:

ball1: setPos(getpos pf ball 0) +VEC3( +4 radius on x axis,0, -8 Radius on z axis, )
ball2: setPos(getpos pf ball 0) +VEC3( +2 radius on x axis,0, -8 Radius on z axis, )
ball3: setPos(getpos pf ball 0) +VEC3( +0 radius on x axis,0, -8 Radius on z axis, )
ball4: setPos(getpos pf ball 0) +VEC3( -2 radius on x axis,0, -8 Radius on z axis, )
ball5: setPos(getpos pf ball 0) +VEC3( -4 radius on x axis,0, -8 Radius on z axis, )

next 7 balls:
ball1: setPos(getpos pf ball 0) +VEC3( +4 radius on x axis,0, -12 Radius on z axis, )



METHOD:

void setTriangleBallPos(std::vector<Sphere*> &balls, vec3 givenPos) {

	int oddxiteration;
	int oddziteration;
	int evenziteration;
	int evenxiteration;

	int ballline = 2;
	for (int i = 0; i < spherenum; i++) {
		if (i == 0) {
			balls[i]->setPos(givenPos);
		}
		else if (i == 1) {
			balls[i]->translate(balls[0]->getPos() - vec3(0, 0, 25));
		}
		else {
			if (ballline % 2 == 0) {

				evenxiteration = ballline -1;

				if (ballline == 2) {
					evenziteration = 0;
				}
				else {
					evenziteration = ballline;
				}



				for (int j=0, h = i; j < ballline; j++,h++) {
					balls[h]->translate(balls[0]->getPos() + vec3(evenxiteration*balls[0]->getRadius(),0, (-2-evenziteration)*balls[0]->getRadius()));
					evenxiteration = evenxiteration-2;
					i = h;
				}
				ballline++;
			}
			else {

				oddxiteration = ballline - 1;

				if (ballline == 3) {
					oddziteration = 0;
				}
				else {
					oddziteration = ballline-1;
				}


				for (int j = 0, h = i; j < ballline; j++, h++) {

					balls[h]->translate(balls[0]->getPos() + vec3(oddxiteration*balls[0]->getRadius(), 0, (-4 - oddziteration)*balls[0]->getRadius()));
					oddxiteration = oddxiteration - 2;
					i = h;
				}


				ballline++;
			}

		}
	}
}